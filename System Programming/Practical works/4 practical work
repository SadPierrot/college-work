//15 вариант

#include <stdlib.h>
#include <stdio.h>
int main(int argc, char ** argv){
	int res=0;
	if(argc==4){
		int com = atoi(argv[3]);
		int n=0, i=0, sym, old;
		FILE * in = fopen(argv[1], "r");
		FILE * out = fopen(argv[2], "wb");
		if (com==0&&in&&out){
			int buf=0;
			while ( (sym=fgetc(in))!= EOF ){ // 01110010
				if(sym==0xA){
					sym&=3;
					sym++;
				} else{
					sym&=3;
				}
				for(n=0;3-n>i;n++){
					sym<<=2;
				}
				buf+=sym;
				if (i==3){
					// printf("%x\n", buf);
					if(fwrite(&buf, 1, 1, out)<1){
						perror("err write");
						res=-1;
					}
					buf = 0;
					i=0;
				} else {
					i++;
				}
			}
			buf+=i;
			if(fwrite(&buf, 1, 1, out)<1){
				perror("err write");
				res=-1;
			}
		} else if (com==1&&in&&out){
			int buf[4];
			old=fgetc(in);
			sym=fgetc(in);
			if((old != EOF && sym != EOF)||(old != EOF && sym == EOF)){
				do{
					// printf("%x\n", old);
					for(n=0;n<=3;n++){
						buf[n]=old&192;
						buf[n]>>=6;
						buf[n]=(buf[n]==3)?buf[n]=0xA:buf[n]+0x30;
						old<<=2;
						if(fwrite(&buf[n], 1, 1, out)<1){
							perror("err write");
							res=-1;
						}
					}
					old=sym;
				}while ( (sym=fgetc(in))!=EOF && res!=-1);
				if(res!=-1){
					for(n=0;n<=2;n++){
						buf[n]=(old&192)>>6;
						buf[n]=(buf[n]==3)?buf[n]=0xA:buf[n]+0x30;
						old<<=2;
					}
					buf[3]=(old&192)>>6;
					for(n=0;n<buf[3];n++){
						if(fwrite(&buf[n], 1, 1, out)<1){
							perror("err write");
							res=-1;
						}
					}
				}
			} else {
				perror("Err of reading");
				res=-1;
			}
		} else if(!(in&&out)){
			res = -1;
			perror("Err of open.");
		} else {
			res = -1;
			perror("Not found command");
		}
		if(res!=-1){
			int res1=0, res2=0;
			if (in){
				res1 = fclose(in);
			}
			if (out){
				res2 = fclose(out);
			}
			if((res1||res2)){
				perror("err of close.");
				res=-1;
			}
			
			
		}
		res = res<0?1:0;
		if (res==0) if(printf("good.\n")<0){
			perror("err of printing, but write is good");
			res=1;
		}
	} else {
		perror("not found arguments");
		res=1;
	}
	return res;
}
